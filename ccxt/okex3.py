# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.okex import okex
import hashlib


class okex3 (okex):

    def describe(self):
        return self.deep_extend(super(okex3, self).describe(), {
            'id': 'okex3',
            'name': 'OKEX v3',
            'version': 'v3',
            'has': {
                'CORS': False,
                'futures': True,
                'fetchTickers': True,
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': True,
                'password': True,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/32552768-0d6dd3c6-c4a6-11e7-90f8-c043b64756a7.jpg',
                'api': {
                    'public': 'https://www.okex.com/api',
                    'private': 'https://www.okex.com/api',
                },
                'www': 'https://www.okex.com',
                'doc': 'https://www.okex.com/docs/',
                'fees': 'https://www.okex.com/pages/products/fees.html',
            },
            'api': {
                'public': {
                    'get': [
                        'spot/v3/instruments/{symbol}/book',    # instrument-id
                        'spot/v3/instruments/ticker',
                        'spot/v3/instruments/{symbol}/ticker',
                        'spot/v3/instruments/{symbol}/trades',
                        'spot/v3/instruments/{symbol}/candles',
                        'futures/v3/instruments/{symbol}/book',
                        'futures/v3/instruments/ticker',
                        'futures/v3/instruments/{symbol}/ticker',
                        'futures/v3/instruments/{symbol}/trades',
                        'futures/v3/instruments/{symbol}/candles',
                        'general/v3/time',
                    ],
                },
                'private': {
                    'post': [
                        'account/v3/transfer',
                        'account/v3/withdrawal',
                    ],
                    'get': [
                        'account/v3/withdrawal/fee',
                    ],
                },
            },
        })

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        url = '/'
        url += self.implode_params(path, params)
        query = self.omit(params, self.extract_params(path))
        if api == 'private':
            self.check_required_credentials()
            if method == 'GET':
                if query:
                    url += '?' + self.urlencode(query)
            else:
                body = self.json(query)
            timestamp = ''
            timeStampData = self.fetch(self.urls['api']['public'] + '/general/v3/time')
            timestamp = timeStampData['iso']
            payload = ''.join([timestamp, method, '/api' + url])
            if body:
                payload += body
            signature = self.hmac(payload, self.secret, hashlib.sha256, 'base64')
            headers = {
                'OK-ACCESS-KEY': self.apiKey,
                'OK-ACCESS-SIGN': self.decode(signature),
                'OK-ACCESS-TIMESTAMP': timestamp,
                'OK-ACCESS-PASSPHRASE': self.password,
                'Content-Type': 'application/json',
            }
        else:
            if params:
                url += '?' + self.urlencode(params)
        url = self.urls['api'][api] + url
        return {'url': url, 'method': method, 'body': body, 'headers': headers}
