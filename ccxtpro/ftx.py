# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxtpro.base.exchange import Exchange
import ccxt.async_support as ccxt
from ccxtpro.base.cache import ArrayCache


class ftx(Exchange, ccxt.ftx):

    def describe(self):
        return self.deep_extend(super(ftx, self).describe(), {
            'has': {
                'ws': True,
                'watchOrderBook': True,
                'watchTicker': True,
                'watchTrades': True,
                'watchOHLCV': False,  # missing on the exchange side
                'watchBalance': False,  # missing on the exchange side
                'watchOrders': False,  # not implemented yet
                'watchMyTrades': False,  # not implemented yet
            },
            'urls': {
                'api': {
                    'ws': 'wss://ftx.com/ws',
                },
            },
            'options': {
                'tradesLimit': 1000,
            },
            'streaming': {
                # ftx does not support built-in ws protocol-level ping-pong
                # instead it requires a custom text-based ping-pong
                'ping': self.ping,
                'keepAlive': 15000,
            },
        })

    async def watch_public(self, symbol, channel, params={}):
        await self.load_markets()
        market = self.market(symbol)
        marketId = market['id']
        url = self.urls['api']['ws']
        request = {
            'op': 'subscribe',
            'channel': channel,
            'market': marketId,
        }
        messageHash = channel + ':' + marketId
        return await self.watch(url, messageHash, request, messageHash)

    async def watch_ticker(self, symbol, params={}):
        return await self.watch_public(symbol, 'ticker')

    async def watch_trades(self, symbol, since=None, limit=None, params={}):
        future = self.watch_public(symbol, 'trades')
        return await self.after(future, self.filter_by_since_limit, since, limit, True)

    async def watch_order_book(self, symbol, limit=None, params={}):
        future = self.watch_public(symbol, 'orderbook')
        return await self.after(future, self.limit_order_book, symbol, limit, params)

    def sign_message(self, client, messageHash, message):
        return message

    def handle_partial(self, client, message):
        methods = {
            'orderbook': self.handle_order_book_snapshot,
        }
        methodName = self.safe_string(message, 'channel')
        method = self.safe_value(methods, methodName)
        if method:
            method(client, message)

    def handle_update(self, client, message):
        methods = {
            'trades': self.handle_trades,
            'ticker': self.handle_ticker,
            'orderbook': self.handle_order_book_update,
        }
        methodName = self.safe_string(message, 'channel')
        method = self.safe_value(methods, methodName)
        if method:
            method(client, message)

    def handle_message(self, client, message):
        methods = {
            # ftx API docs say that all tickers and trades will be "partial"
            # however, in fact those are "update"
            # therefore we don't need to parse the "partial" update
            # since it is only used for orderbooks...
            # uncomment to fix if self is wrong
            # 'partial': self.handle_partial,
            'partial': self.handle_order_book_snapshot,
            'update': self.handle_update,
            'subscribed': self.handle_subscription_status,
            'unsubscribed': self.handle_unsubscription_status,
            'info': self.handle_info,
            'error': self.handle_error,
            'pong': self.handle_pong,
        }
        methodName = self.safe_string(message, 'type')
        method = self.safe_value(methods, methodName)
        if method:
            method(client, message)

    def get_message_hash(self, message):
        channel = self.safe_string(message, 'channel')
        marketId = self.safe_string(message, 'market')
        return channel + ':' + marketId

    def handle_ticker(self, client, message):
        #
        #     {
        #         channel: 'ticker',
        #         market: 'BTC/USD',
        #         type: 'update',
        #         data: {
        #             bid: 6652,
        #             ask: 6653,
        #             bidSize: 17.6608,
        #             askSize: 18.1869,
        #             last: 6655,
        #             time: 1585787827.3118029
        #         }
        #     }
        #
        data = self.safe_value(message, 'data', {})
        marketId = self.safe_string(message, 'market')
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
            ticker = self.parse_ticker(data, market)
            symbol = ticker['symbol']
            self.tickers[symbol] = ticker
            messageHash = self.get_message_hash(message)
            client.resolve(ticker, messageHash)
        return message

    def handle_order_book_snapshot(self, client, message):
        #
        #     {
        #         channel: "orderbook",
        #         market: "BTC/USD",
        #         type: "partial",
        #         data: {
        #             time: 1585812237.6300597,
        #             checksum: 2028058404,
        #             bids: [
        #                 [6655.5, 21.23],
        #                 [6655, 41.0165],
        #                 [6652.5, 15.1985],
        #             ],
        #             asks: [
        #                 [6658, 48.8094],
        #                 [6659.5, 15.6184],
        #                 [6660, 16.7178],
        #             ],
        #             action: "partial"
        #         }
        #     }
        #
        data = self.safe_value(message, 'data', {})
        marketId = self.safe_string(message, 'market')
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
            symbol = market['symbol']
            options = self.safe_value(self.options, 'watchOrderBook', {})
            limit = self.safe_integer(options, 'limit', 400)
            orderbook = self.order_book({}, limit)
            self.orderbooks[symbol] = orderbook
            timestamp = self.safe_timestamp(data, 'time')
            snapshot = self.parse_order_book(data, timestamp)
            orderbook.reset(snapshot)
            # checksum = self.safe_string(data, 'checksum')
            # todo: self.checkOrderBookChecksum(client, orderbook, checksum)
            self.orderbooks[symbol] = orderbook
            messageHash = self.get_message_hash(message)
            client.resolve(orderbook, messageHash)

    def handle_delta(self, bookside, delta):
        price = self.safe_float(delta, 0)
        amount = self.safe_float(delta, 1)
        bookside.store(price, amount)

    def handle_deltas(self, bookside, deltas):
        for i in range(0, len(deltas)):
            self.handle_delta(bookside, deltas[i])

    def handle_order_book_update(self, client, message):
        #
        #     {
        #         channel: "orderbook",
        #         market: "BTC/USD",
        #         type: "update",
        #         data: {
        #             time: 1585812417.4673214,
        #             checksum: 2215307596,
        #             bids: [[6668, 21.4066], [6669, 25.8738], [4498, 0]],
        #             asks: [],
        #             action: "update"
        #         }
        #     }
        #
        data = self.safe_value(message, 'data', {})
        marketId = self.safe_string(message, 'market')
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
            symbol = market['symbol']
            orderbook = self.orderbooks[symbol]
            self.handle_deltas(orderbook['asks'], self.safe_value(data, 'asks', []))
            self.handle_deltas(orderbook['bids'], self.safe_value(data, 'bids', []))
            # orderbook['nonce'] = u
            timestamp = self.safe_timestamp(data, 'time')
            orderbook['timestamp'] = timestamp
            orderbook['datetime'] = self.iso8601(timestamp)
            # checksum = self.safe_string(data, 'checksum')
            # todo: self.checkOrderBookChecksum(client, orderbook, checksum)
            self.orderbooks[symbol] = orderbook
            messageHash = self.get_message_hash(message)
            client.resolve(orderbook, messageHash)

    def handle_trades(self, client, message):
        #
        #     {
        #         channel:   "trades",
        #         market:   "BTC-PERP",
        #         type:   "update",
        #         data: [
        #             {
        #                 id:  33517246,
        #                 price:  6661.5,
        #                 size:  2.3137,
        #                 side: "sell",
        #                 liquidation:  False,
        #                 time: "2020-04-02T07:45:12.011352+00:00"
        #             }
        #         ]
        #     }
        #
        data = self.safe_value(message, 'data', {})
        marketId = self.safe_string(message, 'market')
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
            symbol = market['symbol']
            messageHash = self.get_message_hash(message)
            tradesLimit = self.safe_integer(self.options, 'tradesLimit', 1000)
            stored = self.safe_value(self.trades, symbol)
            if stored is None:
                stored = ArrayCache(tradesLimit)
                self.trades[symbol] = stored
            if isinstance(data, list):
                trades = self.parse_trades(data, market)
                for i in range(0, len(trades)):
                    stored.append(trades[i])
            else:
                trade = self.parse_trade(message, market)
                stored.append(trade)
            client.resolve(stored, messageHash)
        return message

    def handle_subscription_status(self, client, message):
        # todo: handle unsubscription status
        # {'type': 'subscribed', 'channel': 'trades', 'market': 'BTC-PERP'}
        return message

    def handle_unsubscription_status(self, client, message):
        # todo: handle unsubscription status
        # {'type': 'unsubscribed', 'channel': 'trades', 'market': 'BTC-PERP'}
        return message

    def handle_info(self, client, message):
        # todo: handle info messages
        # Used to convey information to the user. Is accompanied by a code and msg field.
        # When our servers restart, you may see an info message with code 20001. If you do, please reconnect.
        return message

    def handle_error(self, client, message):
        return message

    def ping(self, client):
        # ftx does not support built-in ws protocol-level ping-pong
        # instead it requires a custom json-based text ping-pong
        # https://docs.ftx.com/#websocket-api
        return {
            'op': 'ping',
        }

    def handle_pong(self, client, message):
        client.lastPong = self.milliseconds()
        return message
